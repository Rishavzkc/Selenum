package PageObject;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.github.bonigarcia.wdm.WebDriverManager;

public class BaseTest {
	
	WebDriver driver;
	public LandingPage landingPage;
	
public WebDriver initializeDriver() throws IOException {

	//properties class
	Properties prop =new Properties();
	FileInputStream fis =new FileInputStream(System.getProperty("user.dir")+ "//src//main//java//PageObject//GlobalData.properties");
	prop.load(fis); 
	
String browserName=	prop.getProperty("browser");
if (browserName.equalsIgnoreCase("chrome"))
{
WebDriverManager.chromedriver().setup();
 driver = new ChromeDriver();

}
else if(browserName.equalsIgnoreCase("firefox")){
	//Firefox
}
driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
driver.manage().window().maximize();
return driver;
}

public List<HashMap<String, String>> getJsonDataToMap() throws IOException {
	// read json to string
	String jsonContent = FileUtils.readFileToString(
			new File(System.getProperty("user.dir") + "\\src\\main\\java\\data\\PurchaseOrder.json"),
			StandardCharsets.UTF_8);

	// String to Hashmap
	ObjectMapper mapper = new ObjectMapper();
	List<HashMap<String, String>> data = mapper.readValue(jsonContent,
			new TypeReference<List<HashMap<String, String>>>() {
			});
	return data;
}

@BeforeMethod(alwaysRun =true)
public LandingPage launchApplication() throws IOException {
	driver =initializeDriver();
	
	 landingPage =new LandingPage(driver);
	landingPage.goTo();
	return landingPage;
}

@AfterMethod
public void tearDown() {
	driver.close();
}
}
